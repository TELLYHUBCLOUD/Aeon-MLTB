{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#contents","title":"Contents","text":"<ul> <li>Deployment</li> <li>Configuration</li> <li>Features</li> <li>Commands</li> <li>Extras</li> </ul>"},{"location":"COMMANDS/","title":"Commands","text":"<p>Bot commands to be set in @BotFather</p> <pre><code>mirror - or /m Mirror\nqbmirror - or /qm Mirror using qBittorrent\njdmirror - or /jm Mirror using JDownloader\nnzbmirror - or /nm Mirror using Sabnzbd\nytdl - or /y Mirror yt-dlp links\nleech - or /l Upload to Telegram\nqbleech - or /ql Leech using qBittorrent\njdleech - or /jl Leech using JDownloader\nnzbleech - or /nl Leech using Sabnzbd\nytdlleech - or /yl Leech yt-dlp links\nclone - Copy file/folder to Drive\ncount - Count file/folder from GDrive\nsettings - User settings\nbotsettings - Bot settings\nstatus - Show mirror status\nsel - Select files from torrent\nrss - RSS menu\nlist - Search files in Drive\nsearch - Search for torrents with API\nstopall - Cancel all tasks\nforcestart - or /fs Force start a task from queue\ndel - Delete file/folder from GDrive\nlog - Get the bot log\nauth - Authorize user or chat\nunauth - Unauthorize user or chat\nshell - Run commands in Shell\naexec - Execute async function\nexec - Execute sync function\nrestart - Restart the bot\nrestartses - Restart Telegram Session(s)\nstats - Bot usage stats\nping - Ping the bot\nhelp - List all commands and their descriptions\nmediainfo - Check media information\nbroadcast - Broadcast message\nspectrum - Generate spectrum from audio\n</code></pre>"},{"location":"CONFIGURATIONS/","title":"Configurations","text":""},{"location":"CONFIGURATIONS/#1-required-fields","title":"1. Required Fields","text":"Variable Type Description <code>BOT_TOKEN</code> <code>str</code> Telegram Bot Token obtained from @BotFather. <code>OWNER_ID</code> <code>int</code> Telegram User ID (not username) of the bot's owner. <code>TELEGRAM_API</code> <code>int</code> API ID used to authenticate your Telegram account. Obtainable from my.telegram.org. <code>TELEGRAM_HASH</code> <code>str</code> API hash used to authenticate your Telegram account. Obtainable from my.telegram.org."},{"location":"CONFIGURATIONS/#2-optional-fields","title":"2. Optional Fields","text":"Variable Type Description <code>TG_PROXY</code> <code>dict</code> Proxy settings as dict. Example: <code>{\"scheme\": \"socks5\", \"hostname\": \"11.22.33.44\", \"port\": 1234, \"username\": \"user\", \"password\": \"pass\"}</code>. Username/password optional. <code>USER_SESSION_STRING</code> <code>str</code> Use to access Telegram premium features. Generate using <code>python3 generate_string_session.py</code>. Note: Use in supergroup only. <code>DATABASE_URL</code> <code>str</code> MongoDB connection string. See Create Database. Stores bot/user settings, RSS feeds, and task history. <code>CMD_SUFFIX</code> <code>str</code> | <code>int</code> Suffix to add at the end of all commands. <code>AUTHORIZED_CHATS</code> <code>str</code> User/Chat/Topic IDs to authorize. Format: <code>chat_id</code>, <code>chat_id|thread_id</code>, etc. Separate by spaces. <code>SUDO_USERS</code> <code>str</code> User IDs with sudo permission. Separate by spaces. <code>UPLOAD_PATHS</code> <code>dict</code> Dict with upload paths. Example: <code>{\"path 1\": \"remote:\", \"path 2\": \"gdrive id\", ...}</code> <code>DEFAULT_UPLOAD</code> <code>str</code> <code>rc</code> for <code>RCLONE_PATH</code>, <code>gd</code> for <code>GDRIVE_ID</code>. Default: <code>rc</code>. Read More. <code>EXCLUDED_EXTENSIONS</code> <code>str</code> File extensions to skip during processing. Separate by spaces. <code>INCOMPLETE_TASK_NOTIFIER</code> <code>bool</code> Notify after restart for incomplete tasks. Requires <code>DATABASE_URL</code> and the bot to be in a supergroup. Default: <code>False</code>. <code>FILELION_API</code> <code>str</code> API key from FileLion. <code>STREAMWISH_API</code> <code>str</code> API key from StreamWish. <code>YT_DLP_OPTIONS</code> <code>dict</code> Dict of <code>yt-dlp</code> options. Docs. Convert script. <code>USE_SERVICE_ACCOUNTS</code> <code>bool</code> Use Google API service accounts. See guide. <code>FFMPEG_CMDS</code> <code>dict</code> Dict with lists of ffmpeg commands. Start with arguments only. Use <code>-ff key</code> to apply. Add <code>-del</code> to auto-delete source. See example and notes. <code>NAME_SUBSTITUTE</code> <code>str</code> Replace/remove words/characters using <code>source/target</code> format. Use <code>\\</code> for escaping special characters."},{"location":"CONFIGURATIONS/#3-gdrive-tools","title":"3. GDrive Tools","text":"Variable Type Description <code>GDRIVE_ID</code> <code>str</code> Google Drive Folder/TeamDrive ID or <code>root</code>. <code>IS_TEAM_DRIVE</code> <code>bool</code> Set <code>True</code> if <code>GDRIVE_ID</code> refers to a TeamDrive. Default: <code>False</code>. <code>INDEX_URL</code> <code>str</code> Index URL for the Google Drive. Reference. <code>STOP_DUPLICATE</code> <code>bool</code> If <code>True</code>, the bot will check for duplicate file/folder names in Google Drive before uploading. Default: <code>False</code>."},{"location":"CONFIGURATIONS/#4-rclone","title":"4. Rclone","text":"Variable Type Description <code>RCLONE_PATH</code> <code>str</code> Default Rclone upload path (e.g., <code>myremote:path</code>). <code>RCLONE_FLAGS</code> <code>str</code> Additional Rclone flags. Use <code>--key:value|--key</code> format. Rclone Flags Docs. <code>RCLONE_SERVE_URL</code> <code>str</code> URL for Rclone serve. Example: <code>http://myip</code> or <code>http://myip:port</code>. <code>RCLONE_SERVE_PORT</code> <code>int</code> Port. Default: <code>8080</code>. <code>RCLONE_SERVE_USER</code> <code>str</code> Serve username. <code>RCLONE_SERVE_PASS</code> <code>str</code> Serve password."},{"location":"CONFIGURATIONS/#5-update","title":"5. Update","text":"Variable Type Description <code>UPSTREAM_REPO</code> <code>str</code> GitHub repo link. For private, use <code>https://username:token@github.com/username/repo</code>. Get token. <code>UPSTREAM_BRANCH</code> <code>str</code> Branch to use. Default: <code>master</code>."},{"location":"CONFIGURATIONS/#6-leech","title":"6. Leech","text":"Variable Type Description <code>LEECH_SPLIT_SIZE</code> <code>int</code> Split size in bytes for leeching. Default: <code>2GB</code> (standard users), <code>4GB</code> (Telegram premium users). <code>AS_DOCUMENT</code> <code>bool</code> Upload leeched files as documents. Default: <code>False</code> (uploads as media). <code>USER_TRANSMISSION</code> <code>bool</code> Use user session for uploads/downloads in supergroups. Default: <code>False</code>. <code>HYBRID_LEECH</code> <code>bool</code> Switch between bot and user sessions for leeching based on file size. Default: <code>False</code>. <code>LEECH_FILENAME_PREFIX</code> <code>str</code> Prefix to add to leeched file names. <code>LEECH_DUMP_CHAT</code> <code>list[str/int]</code> Chat/Channel ID(s) to send leeched files. Use <code>-100</code> prefix for private channels or <code>chat_id|thread_id</code> for topics. <code>THUMBNAIL_LAYOUT</code> <code>str</code> Layout like <code>2x2</code>, <code>4x4</code>, <code>3x3</code>, etc."},{"location":"CONFIGURATIONS/#7-qbittorrentaria2csabnzbd","title":"7. qBittorrent/Aria2c/Sabnzbd","text":"Variable Type Description <code>TORRENT_TIMEOUT</code> <code>int</code> Timeout in seconds for dead torrents. <code>BASE_URL</code> <code>str</code> Bot URL. Example: <code>http://myip</code> or <code>http://myip:port</code>. <code>BASE_URL_PORT</code> <code>int</code> Port. Default: <code>80</code>. <code>WEB_PINCODE</code> <code>bool</code> Ask PIN before file selection. Default: <code>False</code>."},{"location":"CONFIGURATIONS/#8-jdownloader","title":"8. JDownloader","text":"Variable Type Description <code>JD_EMAIL</code> <code>str</code> Email for My JDownloader. <code>JD_PASS</code> <code>str</code> Password for My JDownloader. You may zip your <code>cfg/</code> directory as <code>cfg.zip</code> and include it in the repository."},{"location":"CONFIGURATIONS/#9-sabnzbd","title":"9. Sabnzbd","text":"Variable Type Description <code>USENET_SERVERS</code> <code>list</code> List of dictionaries with Usenet server configurations. Example: <pre><code>[{'name': 'main', 'host': '', 'port': 563, 'timeout': 60, 'username': '', 'password': '', 'connections': 8, 'ssl': 1, 'ssl_verify': 2, 'ssl_ciphers': '', 'enable': 1, 'required': 0, 'optional': 0, 'retention': 0, 'send_group': 0, 'priority': 0}]\n</code></pre> <p>More info</p>"},{"location":"CONFIGURATIONS/#10-rss","title":"10. RSS","text":"Variable Type Description <code>RSS_DELAY</code> <code>int</code> Time interval in seconds. Default: <code>600</code>. <code>RSS_SIZE_LIMIT</code> <code>int</code> Max item size in bytes. Default: <code>0</code>. <code>RSS_CHAT</code> <code>str</code>/<code>int</code> Chat ID or username. Use <code>channel|topic</code> format if needed. <p>Note: <code>RSS_CHAT</code> is mandatory. Requires either <code>USER_SESSION_STRING</code> or linked group/channel setup.</p>"},{"location":"CONFIGURATIONS/#11-queue-system","title":"11. Queue System","text":"Variable Type Description <code>QUEUE_ALL</code> <code>int</code> Max concurrent upload + download tasks. <code>QUEUE_DOWNLOAD</code> <code>int</code> Max concurrent download tasks. <code>QUEUE_UPLOAD</code> <code>int</code> Max concurrent upload tasks."},{"location":"CONFIGURATIONS/#12-nzb-search","title":"12. NZB Search","text":"Variable Type Description <code>HYDRA_IP</code> <code>str</code> IP address of NZBHydra2. <code>HYDRA_API_KEY</code> <code>str</code> API key from NZBHydra2."},{"location":"CONFIGURATIONS/#13-aeon-specific-configurations","title":"13. Aeon-Specific Configurations","text":"Variable Type Description <code>METADATA_KEY</code> <code>str</code> Key used to tag or fetch metadata. <code>WATERMARK_KEY</code> <code>str</code> Key used for watermarking files or content. <code>SET_COMMANDS</code> <code>bool</code> Whether to register bot commands on startup. <code>TOKEN_TIMEOUT</code> <code>int</code> Timeout in seconds for token/session expiry. <code>PAID_CHANNEL_ID</code> <code>int</code> Telegram Channel ID that users must join to use the bot without a token. <code>PAID_CHANNEL_LINK</code> <code>str</code> Public or invite link to the paid Telegram channel. <code>DELETE_LINKS</code> <code>bool</code> If <code>True</code>, automatically delete download or share links after a certain period or action. <code>FSUB_IDS</code> <code>str</code> Comma-separated Chat IDs of channels users must subscribe to (forced subscription). <code>LOG_CHAT_ID</code> <code>int</code> Chat ID where leech logs are sent. <code>LEECH_FILENAME_CAPTION</code> <code>str</code> Template caption for leeched/downloaded filenames. <code>INSTADL_API</code> <code>str</code> URL or endpoint for InstaDL API integration. <code>HEROKU_APP_NAME</code> <code>str</code> Name of your Heroku app, used to get <code>BASE_URL</code> automatically. <code>HEROKU_API_KEY</code> <code>str</code> API key for accessing and controlling your Heroku app."},{"location":"DEPLOYMENT/","title":"Deployment","text":""},{"location":"DEPLOYMENT/#deployment-instructions-heroku","title":"Deployment Instructions (Heroku)","text":"<p>Follow these steps to deploy Aeon to Heroku:</p>"},{"location":"DEPLOYMENT/#1-fork-and-star-the-repository","title":"1. Fork and Star the Repository","text":"<ul> <li>Click the Fork button at the top-right corner of this repository.</li> <li>Give the repository a star to show your support.</li> </ul>"},{"location":"DEPLOYMENT/#2-navigate-to-your-forked-repository","title":"2. Navigate to Your Forked Repository","text":"<ul> <li>Access your forked version of this repository.</li> </ul>"},{"location":"DEPLOYMENT/#3-enable-github-actions","title":"3. Enable GitHub Actions","text":"<ul> <li>Go to the Settings tab of your forked repository.</li> <li>Enable Actions by selecting the appropriate option in the settings.</li> </ul>"},{"location":"DEPLOYMENT/#4-run-the-deployment-workflow","title":"4. Run the Deployment Workflow","text":"<ol> <li>Open the Actions tab.</li> <li>Select the <code>Deploy to Heroku</code> workflow from the available list.</li> <li>Click Run workflow and fill out the required inputs:</li> <li>BOT_TOKEN: Your Telegram bot token.</li> <li>OWNER_ID: Your Telegram ID.</li> <li>DATABASE_URL: MongoDB connection string.</li> <li>TELEGRAM_API: Telegram API ID (from my.telegram.org).</li> <li>TELEGRAM_HASH: Telegram API hash (from my.telegram.org).</li> <li>HEROKU_APP_NAME: Name of your Heroku app (you should create this on Heroku beforehand).</li> <li>HEROKU_EMAIL: Email address associated with your Heroku account.</li> <li>HEROKU_API_KEY: API key from your Heroku account (found under Account Settings &gt; API Key).</li> <li>HEROKU_TEAM_NAME (Optional): Required only if deploying under a Heroku team account.</li> <li>Run the workflow and wait for it to complete.</li> </ol>"},{"location":"DEPLOYMENT/#5-finalize-setup","title":"5. Finalize Setup","text":"<ul> <li>After deployment, configure any remaining variables in your Heroku dashboard.</li> <li>Use the <code>/botsettings</code> command to upload sensitive files like <code>token.pickle</code> if needed.</li> </ul>"},{"location":"EXTRAS/","title":"Extras","text":""},{"location":"EXTRAS/#getting-google-oauth-api-credential-file-and-tokenpickle","title":"Getting Google OAuth API credential file and token.pickle","text":"<p>NOTES: - Authentication methods have changed; <code>token.pickle</code> can no longer be generated using the bot or Replit. You will need an operating system with a local web browser (e.g., Termux on Android, or a desktop OS). - Windows users should install Python 3 and pip. Instructions can be found via a Google search or in Wiszky's Telegraph tutorial. - The link generated by <code>generate_drive_token.py</code> must be opened in a local web browser.</p> <ol> <li>Visit the Google Cloud Console.</li> <li>Go to the OAuth Consent Screen tab, fill in the required information, and save.</li> <li>Go to the Credentials tab and click Create Credentials -&gt; OAuth client ID.</li> <li>Choose Desktop app as the Application type and click Create.</li> <li>Publish your OAuth consent screen app to prevent <code>token.pickle</code> from expiring. (Usually, an option like \"Publish App\" under the OAuth consent screen).</li> <li>Use the download button (usually a JSON icon) next to your newly created OAuth client ID to download your credentials.</li> <li>Move the downloaded file to the root directory of your mirrorbot instance and rename it to <code>credentials.json</code>.</li> <li>Visit the Google APIs Library.</li> <li>Search for \"Google Drive API\" and enable it for your project.</li> <li>Finally, run the script to generate the <code>token.pickle</code> file for Google Drive:</li> </ol> <pre><code>pip3 install google-api-python-client google-auth-httplib2 google-auth-oauthlib\npython3 generate_drive_token.py\n</code></pre>"},{"location":"EXTRAS/#generating-rcloneconf","title":"Generating <code>rclone.conf</code>","text":"<ol> <li>Install Rclone from the Official Site.</li> <li>Create new remote(s) using the <code>rclone config</code> command.</li> <li>Copy <code>rclone.conf</code> from your system\u2019s Rclone configuration directory into the repository root directory.</li> </ol>"},{"location":"EXTRAS/#upload-configuration","title":"Upload Configuration","text":"<ul> <li><code>RCLONE_PATH</code>, similar to <code>GDRIVE_ID</code>, defines a default path for mirrors.</li> <li> <p>Additionally, the <code>DEFAULT_UPLOAD</code> variable selects the default tool, either Rclone (<code>rc</code>) or the Google API Python client (<code>gd</code>).</p> </li> <li> <p>If <code>DEFAULT_UPLOAD</code> is set to <code>'rc'</code>, you must provide <code>RCLONE_PATH</code> as the default, or use <code>rcl</code> in commands to select the destination path for each new task.</p> </li> <li> <p>If <code>DEFAULT_UPLOAD</code> is set to <code>'gd'</code>, you must provide <code>GDRIVE_ID</code> with the Google Drive folder or Team Drive ID.</p> </li> <li> <p><code>rclone.conf</code> can be added to the repository root directory (like <code>token.pickle</code>) before deployment, or uploaded as a private file using the <code>/bsetting</code> command.</p> </li> <li>If <code>rclone.conf</code> is uploaded via <code>/usetting</code> or placed in <code>rclone/{user_id}.conf</code>, then any Rclone path specified in commands or <code>RCLONE_PATH</code> must be prefixed with <code>mrcc:</code>.</li> <li>When manually specifying a path to use a user-specific <code>rclone.conf</code> (added via <code>/usetting</code>), prefix the path with <code>mrcc:</code>.</li> </ul> <p>In summary, the <code>up:</code> parameter in commands can have the following values: - <code>gd</code>: Upload to the <code>GDRIVE_ID</code> specified in your configuration. - <code>rc</code>: Upload to the <code>RCLONE_PATH</code> specified in your configuration. - <code>rcl</code>: Select an Rclone path at the time of the task. - <code>rclone_path</code>: A specific Rclone path, e.g., <code>myremote:path</code> (uses owner's <code>rclone.conf</code>) or <code>mrcc:myremote:path</code> (uses user's <code>rclone.conf</code>).</p>"},{"location":"EXTRAS/#upstream_repo-recommended","title":"<code>UPSTREAM_REPO</code> (Recommended)","text":"<p>The <code>UPSTREAM_REPO</code> variable can be used to edit or add any file in the repository.</p> <ul> <li>You can add a private or public repository link to fetch or overwrite all files from it.</li> <li>You can skip adding private files like <code>token.pickle</code> or the <code>accounts</code> folder before deploying; simply fill <code>UPSTREAM_REPO</code> with a private repository link if you want to fetch all files, including private ones.</li> <li>If you add private files during deployment AND you've also specified a private <code>UPSTREAM_REPO</code> containing those same private files, the files from the <code>UPSTREAM_REPO</code> will overwrite those added during deployment.</li> <li>Furthermore, if you are using a database for private files, those files will override any added before deployment or from a private <code>UPSTREAM_REPO</code>.</li> <li>If you fill <code>UPSTREAM_REPO</code> with the official repository link, be careful: if there are changes in <code>requirements.txt</code> in the official repository, your bot might not start after a restart. In this case, you need to deploy again with updated code to install the new requirements or simply change <code>UPSTREAM_REPO</code> to your fork's link with the older (compatible) updates.</li> <li>If you fill <code>UPSTREAM_REPO</code> with your fork's link, also be careful when fetching commits from the official repository, as changes there might affect your bot.</li> <li>Changes from your <code>UPSTREAM_REPO</code> will take effect only after a restart of the bot.</li> </ul>"},{"location":"EXTRAS/#bittorrent-seed-configuration","title":"BitTorrent Seed Configuration","text":"<p>Using the <code>-d</code> argument (or equivalent seeding options in commands) alone will lead to using global options for Aria2c or qBittorrent.</p>"},{"location":"EXTRAS/#qbittorrent","title":"QBittorrent","text":"<p>Global options: <code>GlobalMaxRatio</code> and <code>GlobalMaxSeedingMinutes</code> in <code>qbittorrent.conf</code>. A value of <code>-1</code> means no limit, but you can cancel seeding manually.</p> <p>NOTE: Do not change <code>MaxRatioAction</code>.</p>"},{"location":"EXTRAS/#aria2c","title":"Aria2c","text":"<p>Global options: <code>--seed-ratio</code> (a value of <code>0</code> means no limit) and <code>--seed-time</code> (a value of <code>0</code> means no seeding after download completion) in <code>aria.sh</code>.</p>"},{"location":"EXTRAS/#using-service-accounts-for-uploading-to-avoid-user-rate-limits","title":"Using Service Accounts for Uploading (to avoid user rate limits)","text":"<p>For Service Accounts to work, you must set <code>USE_SERVICE_ACCOUNTS = \"True\"</code> (as a string) in your configuration file or environment variables. NOTE: Using Service Accounts is primarily recommended when uploading to a Team Drive.</p>"},{"location":"EXTRAS/#1-generate-service-accounts-what-is-a-service-account","title":"1. Generate Service Accounts. (What is a Service Account?)","text":"<p>Let us create only the Service Accounts that we need. Warning: Abuse of this feature is not the aim of this project, and we do NOT recommend creating many projects. Just one project with 100 SAs allows for plenty of use. It's also possible that excessive abuse might get your projects banned by Google.</p> <p>NOTE: If you have created SAs in the past using this script, you can re-download the keys by running:</p> <pre><code>python3 gen_sa_accounts.py --download-keys $PROJECTID\n</code></pre> <p>NOTE: One Service Account can upload/copy approximately 750 GB per day. One Google Cloud project can create up to 100 Service Accounts, allowing for a potential daily upload capacity of 75 TB.</p> <p>NOTE: Google Drive users can typically copy 2TB/DAY from files created by a single uploader account. If you encounter a <code>userRateLimitExceeded</code> error, it doesn't necessarily mean your limit was exceeded, but rather that the file creator's daily sharing/download limit (2TB/DAY) for that specific file has been reached for others.</p> <p>Two methods to create Service Accounts:</p>"},{"location":"EXTRAS/#method-1-create-service-accounts-in-an-existing-project-recommended-method","title":"Method 1: Create Service Accounts in an Existing Project (Recommended Method)","text":"<p>List your projects ids:</p> <pre><code>python3 gen_sa_accounts.py --list-projects\n</code></pre> <p>Enable services automatically by this command:</p> <pre><code>python3 gen_sa_accounts.py --enable-services $PROJECTID\n</code></pre> <p>Create Service Accounts to current project:</p> <pre><code>python3 gen_sa_accounts.py --create-sas $PROJECTID\n</code></pre> <p>Download Service Accounts as accounts folder:</p> <pre><code>python3 gen_sa_accounts.py --download-keys $PROJECTID\n</code></pre>"},{"location":"EXTRAS/#method-2-create-service-accounts-in-new-project","title":"Method 2: Create Service Accounts in New Project","text":"<pre><code>python3 gen_sa_accounts.py --quick-setup 1 --new-only\n</code></pre> <p>A folder named accounts will be created which will contain keys for the Service Accounts.</p>"},{"location":"EXTRAS/#2-add-service-accounts","title":"2. Add Service Accounts","text":"<p>Two methods to add service accounts:</p>"},{"location":"EXTRAS/#method-1-add-them-to-google-group-then-to-team-drive-recommended","title":"Method 1: Add Them To Google Group then to Team Drive (Recommended)","text":"<p>Mount accounts folder:</p> <pre><code>cd accounts\n</code></pre> <p>Grab emails from all accounts into an <code>emails.txt</code> file that will be created in the <code>accounts</code> folder:</p> <p>For Windows using PowerShell:</p> <pre><code>$emails = Get-ChildItem .\\**.json |Get-Content -Raw |ConvertFrom-Json |Select -ExpandProperty client_email &gt;&gt;emails.txt\n</code></pre> <p>For Linux:</p> <pre><code>grep -oPh '\"client_email\": \"\\K[^\"]+' *.json &gt; emails.txt\n</code></pre> <p>Navigate out of the <code>accounts</code> folder:</p> <pre><code>cd ..\n</code></pre> <p>Then add the emails from <code>emails.txt</code> to a Google Group. After that, add this Google Group to your Shared Drive and promote the group to \"Manager\". Finally, you can delete the <code>emails.txt</code> file from the <code>accounts</code> folder.</p>"},{"location":"EXTRAS/#method-2-add-them-to-team-drive-directly","title":"Method 2: Add Them To Team Drive Directly","text":"<p>Run:</p> <pre><code>python3 add_to_team_drive.py -d SharedTeamDriveSrcID\n</code></pre>"},{"location":"EXTRAS/#create-database","title":"Create Database","text":"<ol> <li>Go to https://mongodb.com/ and sign-up.</li> <li>Create Shared Cluster.</li> <li>Press on Database under the Deployment header; your created cluster will be listed there.</li> <li>Press Connect for your cluster, choose Allow Access From Anywhere, and press Add IP Address (without editing the IP unless necessary). Then, create a database user.</li> <li>After creating the user, press Choose a connection method, then select Connect your application. Choose Python as your driver and version 3.12 or later.</li> <li>Copy your connection string. Replace <code>&lt;password&gt;</code> with the password of the user you created. Then, press Close.</li> </ol>"},{"location":"EXTRAS/#multi-drive-list-configuration","title":"Multi-Drive List Configuration","text":"<p>To use a list from multiple Team Drives or folders, run <code>driveid.py</code> in your terminal and follow the prompts. It will generate a <code>list_drives.txt</code> file, or you can simply create <code>list_drives.txt</code> in the working directory and fill it according to the format below:</p> <pre><code>DriveName folderID/tdID or `root` IndexLink(if available)\nDriveName folderID/tdID or `root` IndexLink(if available)\n</code></pre> <p>Example:</p> <pre><code>TD1 root https://example.dev\nTD2 0AO1JDB1t3i5jUk9PVA https://example.dev\n</code></pre>"},{"location":"EXTRAS/#yt-dlp-and-aria2c-authentication-using-netrc-file","title":"yt-dlp and Aria2c Authentication Using <code>.netrc</code> File","text":"<p>For using your premium accounts in yt-dlp or for accessing password-protected Index Links with Aria2c, create a <code>.netrc</code> file in the repository root with the following format:</p> <p>Note: Create a file named <code>.netrc</code> (starting with a dot). This file will be hidden on Unix-like systems, so ensure your file explorer is set to show hidden files if you need to edit it after creation.</p> <p>Format:</p> <pre><code>machine host login username password my_password\n</code></pre> <p>Using Aria2c you can also use built in feature from bot with or without username. Here example for index link without username.</p> <pre><code>machine example.workers.dev password index_password\n</code></pre> <p>Where <code>host</code> is the name of the extractor (e.g., <code>instagram</code>, <code>twitch</code>, or the hostname of the protected index). Multiple accounts for different hosts can be added, each on a new line.</p> <p>yt-dlp: Authentication using <code>cookies.txt</code> file. It's recommended to CREATE THIS FILE IN AN INCOGNITO/PRIVATE BROWSER TAB to avoid exporting personal cookies.</p>"},{"location":"FEATURES/","title":"Features","text":""},{"location":"FEATURES/#qbittorrent","title":"qBittorrent","text":"<ul> <li>Access external web UI for file removal or settings adjustment. Sync with database using the sync button in bot settings.</li> <li>Select files from a torrent before or during download using the MLTB file selector (requires Base URL) (task option).</li> <li>Seed torrents to a specific ratio and duration (task option).</li> <li>Edit global options during runtime via bot settings (global option).</li> </ul>"},{"location":"FEATURES/#aria2c","title":"Aria2c","text":"<ul> <li>Select torrent files before or during download (requires Base URL) (task option).</li> <li>Seed torrents to a specific ratio and duration (task option).</li> <li>Netrc authentication support (global option).</li> <li>Direct link authentication (even with only a username or password) (task option).</li> <li>Edit global options during runtime via bot settings (global option).</li> </ul>"},{"location":"FEATURES/#sabnzbd","title":"Sabnzbd","text":"<ul> <li>Access external web interface for file removal or settings adjustments. Sync with database using the sync button in bot settings.</li> <li>Remove files from jobs before or during download using the MLTB file selector (requires Base URL) (task option).</li> <li>Edit global options during runtime via bot settings (global option).</li> <li>Manage Usenet servers (add/edit/remove).</li> </ul>"},{"location":"FEATURES/#telegram-uploaddownload","title":"Telegram Upload/Download","text":"<ul> <li>Configure split size for uploads (global, user, and task option).</li> <li>Use custom thumbnails for uploads (user and task option).</li> <li>Add a prefix to leeched filenames (user option).</li> <li>Set upload type (document or media) (global, user, and task option).</li> <li>Upload to a specific chat (supergroup, channel, private chat, or topic) (global, user, and task option).</li> <li>Option for equal split sizes (global and user option).</li> <li>Media group support for sending split file parts (global and user option).</li> <li>Download restricted Telegram messages using public, private, or supergroup links (task option).</li> <li>Choose transfer session (bot or user) for Telegram premium accounts (global, user, and task option).</li> <li>Hybrid upload mode using both bot and user sessions based on file size (global, user, and task option).</li> <li>Upload with a custom thumbnail layout (global, user, and task option).</li> <li>Full topic support for uploads and downloads within groups.</li> </ul>"},{"location":"FEATURES/#google-drive","title":"Google Drive","text":"<ul> <li>Perform operations: download, upload, clone, delete, and count files/folders.</li> <li>Search for files and folders within specific Drive folders or TeamDrives.</li> <li>Fallback to <code>token.pickle</code> authentication when no Service Account is available.</li> <li>Utilize a random Service Account for each task to distribute API usage.</li> <li>Recursive search support using root or TeamDrive ID (task option).</li> <li>Option to prevent duplicate uploads by checking filenames (global and user option).</li> <li>Define custom upload destinations (global, user, and task option).</li> <li>Choose between <code>token.pickle</code> or Service Accounts for authentication, with button support for selection (global, user, and task option).</li> <li>Index link support for Bhadoo's Index.</li> </ul>"},{"location":"FEATURES/#rclone","title":"Rclone","text":"<ul> <li>Transfer (download/upload/clone server-side) with or without random Service Accounts (global and user option).</li> <li>Choose config, remote, and path with or without button support (global, user, and task option).</li> <li>Set custom flags per task or globally (global, user, and task option).</li> <li>File/folder selection via buttons (task option).</li> <li>Use <code>rclone.conf</code> (global and user option).</li> <li>Serve combined remotes as an index (global option).</li> <li>Custom upload destinations (global, user, and task option).</li> </ul>"},{"location":"FEATURES/#status","title":"Status","text":"<ul> <li>View download, upload, extract, archive, seed, and clone statuses.</li> <li>Unlimited task status pages (global option).</li> <li>Interval-based status message updates (global option).</li> <li>Navigate through task status pages using next/previous buttons (global and user option).</li> <li>Filter task view by status and type if there are more than 30 tasks (global and user option).</li> <li>Use step controls for paginating through tasks (global and user option).</li> <li>View user-specific task status (manual refresh only).</li> </ul>"},{"location":"FEATURES/#yt-dlp","title":"yt-dlp","text":"<ul> <li>Interactive quality selection buttons for downloads (task option).</li> <li>Set custom <code>yt-dlp</code> options (global, user, and task option).</li> <li>Support for <code>.netrc</code> file authentication (global option).</li> <li>Support for <code>cookies.txt</code> file authentication (global option).</li> <li>Embed original thumbnail in leeched video files.</li> <li>Wide audio format support for extraction.</li> </ul>"},{"location":"FEATURES/#jdownloader","title":"JDownloader","text":"<ul> <li>Synchronize JDownloader settings with the bot (global option).</li> <li>Option to wait for file selection or variant changes before starting a download.</li> <li>Support for <code>.dlc</code> container files.</li> <li>Manage JDownloader settings via its web interface, Android/iOS apps, or browser extensions.</li> </ul>"},{"location":"FEATURES/#mongodb-database","title":"MongoDB Database","text":"<ul> <li>Stores bot and user settings, including thumbnails and private files (e.g., <code>token.pickle</code>, <code>rclone.conf</code>).</li> <li>Stores RSS feed data and messages for incomplete tasks (for notification after restart).</li> <li>Stores JDownloader settings.</li> <li>Automatically stores and updates runtime configurations, effectively managing variables similar to those in a static <code>config.py</code>.</li> </ul>"},{"location":"FEATURES/#torrent-search","title":"Torrent Search","text":"<ul> <li>Search for torrents using various Torrent Search APIs.</li> <li>Utilize qBittorrent's plugin system for enhanced and site-specific searches.</li> </ul>"},{"location":"FEATURES/#archives","title":"Archives","text":"<ul> <li>Extract split archives, with or without password protection.</li> <li>Zip files or folders, with or without password protection, including support for splitting archives during leech operations.</li> <li>Uses 7-Zip for extraction, supporting a wide variety of archive types.</li> </ul>"},{"location":"FEATURES/#rss","title":"RSS","text":"<ul> <li>Based on rss-chan.</li> <li>RSS feeds (user option).</li> <li>Title filters (feed option).</li> <li>Edit feeds live: pause, resume, command and filter edits (feed option).</li> <li>Sudo controls for user feeds.</li> <li>Fully button-based command execution.</li> </ul>"},{"location":"FEATURES/#overall","title":"Overall","text":"<ul> <li>Docker support for <code>amd64</code>, <code>arm64/v8</code>, <code>arm/v7</code>.</li> <li>Edit runtime variables and overwrite private files (bot/user level).</li> <li>Automatic updates on startup and restart via the <code>UPSTREAM_REPO</code> variable.</li> <li>Telegraph integration (e.g., via loaderX-bot).</li> <li>Initiate Mirror/Leech/Watch/Clone/Count/Delete operations by replying to messages.</li> <li>Support for multiple links or files in a single mirror/leech/clone command.</li> <li>Set custom names for all download links (excluding torrents); file extensions are required for direct links (except for yt-dlp results) (global and user option).</li> <li>Exclude specified file extensions from upload or clone operations (global and user option).</li> <li>\"View Link\" button providing browser access instead of a direct download link for certain outputs.</li> <li>Comprehensive queueing system for all tasks (global option).</li> <li>Zip multiple links or unzip archives into a single directory (task option).</li> <li>Perform bulk downloads from a Telegram TXT file or newline-separated links in a message (task option).</li> <li>Join previously split files (task option).</li> <li>Generate sample videos and screenshots (task option).</li> <li>Cancel ongoing uploads, clones, archives, extractions, splits, or queued tasks (task option).</li> <li>Cancel tasks based on specific statuses using interactive buttons (global option).</li> <li>Convert video or audio files to a specific format using filters (task option).</li> <li>Force-start queued tasks using commands with arguments (task option).</li> <li>Support for shell and executor access for advanced operations.</li> <li>Manage sudo users for privileged bot commands.</li> <li>Save and reuse custom upload paths.</li> <li>Rename files before uploading using name substitution patterns.</li> <li>Select the use of <code>rclone.conf</code> or <code>token.pickle</code> for Google Drive operations without needing <code>mpt:</code> or <code>mrcc:</code> prefixes in basic scenarios.</li> <li>Execute custom FFmpeg commands after a download is complete (task option).</li> <li>Automatically change media metadata based on configurations.</li> <li>Automatically add watermark text to videos or images.</li> <li>Customize caption format for uploaded files.</li> </ul>"}]}