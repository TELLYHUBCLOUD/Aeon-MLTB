#!/bin/bash
# Aeon

set -euo pipefail

export DEBIAN_FRONTEND=noninteractive

TEMP_DIR=$(mktemp -d)
JDOWNLOADER_HOME="/JDownloader"
BIN_DIR="/usr/local/bin"

download_files() {
    mkdir -p "$JDOWNLOADER_HOME" "$BIN_DIR"
    local arch=$(uname -m)
    
    if [ "$arch" = "x86_64" ]; then
        wget -qO "$BIN_DIR/xnox" "https://github.com/userdocs/qbittorrent-nox-static/releases/latest/download/x86_64-qbittorrent-nox" &
        wget -qO "$TEMP_DIR/ffmpeg.tar.xz" "https://github.com/5hojib/FFmpeg-Builds/releases/download/latest/ffmpeg-n7.1-latest-linux64-gpl-7.1.tar.xz" &
        wget -qO "$TEMP_DIR/uv.tar.gz" "https://github.com/astral-sh/uv/releases/latest/download/uv-x86_64-unknown-linux-gnu.tar.gz" &
    else
        wget -qO "$BIN_DIR/xnox" "https://github.com/userdocs/qbittorrent-nox-static/releases/latest/download/aarch64-qbittorrent-nox" &
        wget -qO "$TEMP_DIR/ffmpeg.tar.xz" "https://github.com/5hojib/FFmpeg-Builds/releases/latest/download/ffmpeg-n7.1-latest-linuxarm64-gpl-7.1.tar.xz" &
        wget -qO "$TEMP_DIR/uv.tar.gz" "https://github.com/astral-sh/uv/releases/latest/download/uv-aarch64-unknown-linux-gnu.tar.gz" &
    fi
    wget -qO "$JDOWNLOADER_HOME/JDownloader.jar" http://installer.jdownloader.org/JDownloader.jar &
    
    wait
}

install_packages() {
    apt-get update
    apt-get upgrade -y

    # Base packages for all architectures
    local base_packages=(
        python3.13
        libpython3.13
        python3-pip
        sabnzbdplus
        aria2
        sox
        libsox-fmt-all
        curl
        zstd
        xz-utils
        git
        libmagic-dev
        p7zip-full
        p7zip-rar
        tzdata
        wget
        openjdk-21-jre
        openjdk-21-jre-headless
    )

    # MEGA SDK dependencies (only for x86_64)
    local mega_packages=(
        libcares2
        libcurl4
        libuv1
        libcrypto++8
        libsodium23
        libsqlite3-0
        libssl3
        libfreeimage3
        zlib1g
    )

    # Detect architecture
    local arch=$(uname -m)
    local packages_to_install=("${base_packages[@]}")

    if [ "$arch" = "x86_64" ]; then
        echo "üèóÔ∏è  Installing packages for x86_64 architecture (including MEGA SDK dependencies)"
        packages_to_install+=("${mega_packages[@]}")
    else
        echo "üèóÔ∏è  Installing packages for $arch architecture (excluding MEGA SDK dependencies)"
    fi

    apt-get install -y --no-install-recommends "${packages_to_install[@]}"

    ln -sf /usr/bin/python3.13 /usr/bin/python3
    ln -sf /usr/bin/python3.13 /usr/bin/python
}

install_mega_sdk() {
    # Check architecture - only install MEGA SDK on x86_64
    local arch=$(uname -m)
    if [ "$arch" != "x86_64" ]; then
        echo "‚ö†Ô∏è  Skipping MEGA SDK installation on $arch architecture"
        echo "‚ÑπÔ∏è  MEGA SDK v4.8.0 is only supported on x86_64 (AMD64) architecture"
        echo "‚úÖ MEGA SDK installation skipped for $arch"
        return 0
    fi

    echo "üîß Installing MEGA SDK v4.8.0 from pre-built wheel on $arch architecture..."

    # Verify Python environment
    echo "üîç Checking Python environment..."
    python3 --version

    # Check if wheel file exists in current directory (copied by Dockerfile)
    WHEEL_FILE="./megasdk-4.8.0-py2.py3-none-any.whl"
    if [ ! -f "$WHEEL_FILE" ]; then
        echo "‚ùå MEGA SDK wheel file not found at $WHEEL_FILE"
        echo "üîç Looking for wheel file in current directory..."
        find . -name "*.whl" -type f | head -5
        exit 1
    fi

    echo "‚úÖ Found MEGA SDK wheel file: $WHEEL_FILE"

    # Create virtual environment that matches what the main Dockerfile expects
    # The main Dockerfile sets WORKDIR to /usr/src/app, so create venv there
    echo "üîß Creating virtual environment for MEGA SDK..."
    mkdir -p /usr/src/app
    cd /usr/src/app
    /usr/bin/uv venv .venv || {
        echo "‚ùå Failed to create virtual environment"
        exit 1
    }
    # Copy the wheel file to the working directory
    cp /megasdk-4.8.0-py2.py3-none-any.whl . 2>/dev/null || cp ./megasdk-4.8.0-py2.py3-none-any.whl . || {
        echo "‚ùå Failed to copy MEGA SDK wheel file to working directory"
        exit 1
    }

    # Activate the virtual environment
    echo "üîß Activating virtual environment..."
    source /usr/src/app/.venv/bin/activate || {
        echo "‚ùå Failed to activate virtual environment"
        exit 1
    }

    # Verify we're in the virtual environment
    echo "üîç Verifying virtual environment..."
    which python3
    python3 -c "import sys; print(f'Python executable: {sys.executable}')"

    # Verify uv can see the virtual environment
    echo "üîç Verifying uv virtual environment detection..."
    /usr/bin/uv pip list --help > /dev/null 2>&1 || {
        echo "‚ùå uv pip not working"
        exit 1
    }

    # Install setuptools in the virtual environment using uv
    echo "üì¶ Installing setuptools in virtual environment..."
    /usr/bin/uv pip install setuptools || {
        echo "‚ùå Failed to install setuptools in virtual environment"
        exit 1
    }

    # Install MEGA SDK from wheel in the virtual environment using uv
    echo "üì¶ Installing MEGA SDK v4.8.0 from wheel in virtual environment..."
    WHEEL_FILE="/usr/src/app/megasdk-4.8.0-py2.py3-none-any.whl"
    /usr/bin/uv pip install "$WHEEL_FILE" || {
        echo "‚ùå Failed to install MEGA SDK from wheel in virtual environment"
        exit 1
    }

    # Copy shared libraries to system library path (still needed for system-level access)
    echo "üîó Setting up MEGA SDK shared libraries..."

    # Detect architecture for correct library path
    local arch=$(uname -m)
    local lib_dir
    if [ "$arch" = "x86_64" ]; then
        lib_dir="/usr/lib/x86_64-linux-gnu"
    elif [ "$arch" = "aarch64" ]; then
        lib_dir="/usr/lib/aarch64-linux-gnu"
    else
        echo "‚ö†Ô∏è  Unsupported architecture: $arch, using default lib path"
        lib_dir="/usr/lib"
    fi

    echo "üèóÔ∏è  Using library directory: $lib_dir for architecture: $arch"

    # Ensure the library directory exists
    mkdir -p "$lib_dir"

    MEGA_PKG_DIR="/usr/src/app/.venv/lib/python3.13/site-packages/mega"
    if [ -f "$MEGA_PKG_DIR/libmega.so" ]; then
        cp "$MEGA_PKG_DIR/libmega.so" "$lib_dir/libmega.so.40800"
        echo "‚úÖ Copied libmega.so to system library path: $lib_dir/libmega.so.40800"
    else
        echo "‚ö†Ô∏è  libmega.so not found in virtual environment, installing in system for shared libraries..."
        # Deactivate virtual environment temporarily for system installation
        deactivate
        # Fallback: also install in system for shared libraries
        python3 -m pip install "$WHEEL_FILE" --break-system-packages || {
            echo "‚ùå Failed to install MEGA SDK in system for shared libraries"
            exit 1
        }
        SYSTEM_MEGA_PKG_DIR="/usr/local/lib/python3.13/dist-packages/mega"
        if [ -f "$SYSTEM_MEGA_PKG_DIR/libmega.so" ]; then
            cp "$SYSTEM_MEGA_PKG_DIR/libmega.so" "$lib_dir/libmega.so.40800"
            echo "‚úÖ Copied libmega.so from system installation to system library path: $lib_dir/libmega.so.40800"
        fi
        # Reactivate virtual environment
        source /usr/src/app/.venv/bin/activate
    fi

    # Update library cache
    ldconfig

    # Verify installation in virtual environment
    echo "üîç Verifying MEGA SDK installation in virtual environment..."
    python3 -c "
import mega
api = mega.MegaApi('test')
print('‚úÖ MEGA SDK v4.8.0 imported successfully in virtual environment')
print(f'API version: {api.getVersion()}')
print(f'API methods available: {len([m for m in dir(api) if not m.startswith(\"_\")])}')
print(f'Python executable: {__import__('sys').executable}')
print(f'MEGA module location: {mega.__file__}')
" || {
        echo "‚ùå MEGA SDK installation verification failed in virtual environment"
        echo "üîç Debugging import issue..."

        # Check installed packages in virtual environment
        echo "üì¶ Installed MEGA packages in virtual environment:"
        /usr/bin/uv pip list | grep -i mega || echo "No MEGA packages found in virtual environment"

        # Check Python import path in virtual environment
        echo "üêç Python import paths in virtual environment:"
        python3 -c "import sys; [print(f'  {p}') for p in sys.path if p]"

        # Try to import and show error
        echo "üîç Import error details in virtual environment:"
        python3 -c "
try:
    import mega
    print('‚úÖ Import successful')
except Exception as e:
    print(f'‚ùå Import failed: {e}')
    import traceback
    traceback.print_exc()
"
        exit 1
    }

    # Deactivate virtual environment
    deactivate

    # Return to original directory
    cd /

    # Final verification that the virtual environment is properly set up
    echo "üîç Final verification of virtual environment setup..."
    if [ -f "/usr/src/app/.venv/bin/activate" ]; then
        echo "‚úÖ Virtual environment activation script found"
    else
        echo "‚ùå Virtual environment activation script not found"
        exit 1
    fi

    if [ -f "/usr/src/app/.venv/lib/python3.13/site-packages/mega/__init__.py" ]; then
        echo "‚úÖ MEGA SDK installed in virtual environment"
    else
        echo "‚ùå MEGA SDK not found in virtual environment"
        exit 1
    fi

    echo "‚úÖ MEGA SDK v4.8.0 installed successfully in virtual environment at /usr/src/app/.venv"
}

# Process and move files
process_files() {
    chmod 700 "$BIN_DIR/xnox"
    
    # Extract FFmpeg
    tar -xf "$TEMP_DIR/ffmpeg.tar.xz" -C "$TEMP_DIR"
    local ffmpeg_dir=$(find "$TEMP_DIR" -type d -name "ffmpeg-n7.1-latest-linux*" | head -n 1)
    mv "$ffmpeg_dir/bin/ffmpeg" /usr/bin/xtra
    mv "$ffmpeg_dir/bin/ffprobe" /usr/bin/ffprobe
    mv "$ffmpeg_dir/bin/ffplay" /usr/bin/ffplay
    chmod +x /usr/bin/xtra /usr/bin/ffprobe /usr/bin/ffplay
    
    # Extract UV
    tar -xzf "$TEMP_DIR/uv.tar.gz" -C "$TEMP_DIR"
    mv $(find "$TEMP_DIR" -type f -name "uv" | head -n 1) /usr/bin/uv
    chmod +x /usr/bin/uv
    
    # Install rclone
    curl https://rclone.org/install.sh | bash
    mv /usr/bin/rclone /usr/bin/xone
    mv /usr/bin/aria2c /usr/bin/xria
    # mv /usr/bin/ffmpeg /usr/bin/xtra
    mv /usr/bin/sabnzbdplus /usr/bin/xnzb
}

cleanup() {
    apt-get purge -y wget \
        perl \
        xz-utils \
        perl-modules-5.40
    apt-get install -y --no-install-recommends \
        git \
        curl \
        cpulimit
    apt-get autoremove -y --purge
    apt-get autoclean -y
    apt-get clean -y
    rm -rf \
        /var/lib/apt/lists/* \
        "$TEMP_DIR" \
        Aeon \
        Dockerfile \
        ~/.cache \
        /tmp/* \
        /var/tmp/*

    # Note: Preserving .venv directory with MEGA SDK installation (if installed)
    local arch=$(uname -m)
    if [ "$arch" = "x86_64" ]; then
        echo "‚úÖ Cleanup completed, virtual environment with MEGA SDK preserved"
    else
        echo "‚úÖ Cleanup completed (MEGA SDK not installed on $arch architecture)"
    fi
}

main() {
    install_packages
    download_files
    process_files
    install_mega_sdk
    cleanup
}

main